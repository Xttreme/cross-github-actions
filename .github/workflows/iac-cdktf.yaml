on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK:
        description: Yassir Security Slack Webhook
        required: true
      DECRYPTION_KEY:
          description: The secret key to decrypt the artifact
          required: true
    inputs:
      runs-on:
        description: The Platform to execute on
        type: string
        default: linux-iac
      repository:
        description: "The full name of the repository from which to download the artifact"
        type: string
        required: true
      directory:
        description: The terraform plan output directory
        type: string
        default: .
        required: false
      run-id:
        description: "The ID of the workflow run to download the artifact from"
        type: string
        required: true
      artifact-name:
        description: "The name of the artifact to download"
        type: string
        required: true
      download-path:
        description: The directory to place the downloaded artifact
        type: string
        default: .
        required: false
      scan-ref:
        description: The target directory to scan
        type: string
        required: true
      severity:
        description: The severities to output
        type: string
        default: "CRITICAL, HIGH"
        required: false
      exit-code:
        description: Toggle scan failure if vulnerabilities are found
        type: number
        default: 1
        required: false
      github-token:
        description: "GitHub token with the necessary permissions to download artifacts"
        type: string
        required: true
      soft-fail:
        description: Toggle scan failure if vulnerabilities are found
        type: boolean
        default: false
        required: false
      timeout:
        description: "timeout (default 5m0s)"
        type: string
        required: false
        default: "5m0s"
      framework:
        description: "IaC Type (default all)"
        type: string
        required: false
        default: "all"

jobs:
  trivy-scan:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Download CDKTF Plan Output Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.download-path }}
          github-token: ${{ inputs.github-token }}
          repository: ${{ inputs.repository }}
          run-id: ${{ inputs.run-id }}

      - name: Decrypt CDKTF plan
        env:
         DECRYPTION_KEY: ${{ secrets.DECRYPTION_KEY }} # The same key used for encryption
         PATH_TO_ARTIFACT: ${{ inputs.download-path }}/${{ inputs.artifact-name }}
        run: |
          echo ${{ inputs.download-path }}/${{ inputs.artifact-name }}
          openssl aes-256-cbc -pbkdf2 -iter 10000 -d -in "${PATH_TO_ARTIFACT}" -out "${{ inputs.download-path }}/cdk.tf.json" -k "$DECRYPTION_KEY"
          ls
          cat ${{ inputs.directory }}/cdk.tf.json

      - name: Scan OSS with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "config"
          scan-ref: ./cdk.tf.json
          # severity: ${{ inputs.severity }}
          exit-code: ${{ inputs.exit-code }}

      - uses: actions/upload-artifact@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          name: results_checkov
          path: tests/results/checkov.xml
          retention-days: 1

  checkov:
    runs-on: ${{ inputs.runs-on }}
    name: "Checkov Scan"
    steps:
      - name: Download CDKTF Plan Output Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.download-path }}
          github-token: ${{ inputs.github-token }}
          repository: ${{ inputs.repository }}
          run-id: ${{ inputs.run-id }}

      - name: Decrypt CDKTF plan
        env:
         DECRYPTION_KEY: ${{ secrets.DECRYPTION_KEY }} # The same key used for encryption
         PATH_TO_ARTIFACT: ${{ inputs.download-path }}/${{ inputs.artifact-name }}
        run: openssl aes-256-cbc -pbkdf2 -iter 10000 -d -in "${PATH_TO_ARTIFACT}" -out "${{ inputs.download-path }}/cdk.tf.json" -k "$DECRYPTION_KEY"

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ inputs.directory }}
          # file: example/tfplan.json # optional: provide the path for resource to be scanned. This will override the directory if both are provided.
          # check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          # skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          quiet: false # optional: display only failed checks
          soft_fail: false # optional: do not return an error code if there are failed checks
          framework: terraform_plan
          output_format: cli,junitxml # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          output_file_path: console,tests/results/checkov.xml
          download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues
      - uses: actions/upload-artifact@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          name: results_checkov
          path: tests/results/checkov.xml
          retention-days: 1
  report_results:
    runs-on: ${{ inputs.runs-on }}
    if: ${{ always() }}
    needs: checkov
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: tests/results
          pattern: results_*
          merge-multiple: true
      - name: Publish Report
        uses: mikepenz/action-junit-report@v5.0.0-a02
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "tests/results/*.xml"
          detailed_summary: true
          comment: true
          check_name: tests
  slack-alert:
    if: failure()
    needs: checkov
    runs-on: ${{ inputs.runs-on }}
    continue-on-error: true
    steps:
      - name: Trigger Slack Notification
        uses: rtCamp/action-slack-notify@v2.3.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: github-security-alerts
          SLACK_COLOR: ${{ needs.checkov.result }}
          SLACK_MESSAGE: ":hammer_and_wrench: Checkov Scanner detected security issues."
          SLACK_TITLE: Information
          SLACK_FOOTER: Powered by Yassir Security Team
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
